use crate::error::{ErrorKind, ParseError};
use std::convert::TryFrom;

#[derive(Debug, PartialEq, Clone)]
pub struct ParticipantsBody {
    /// Code indicating the event type.
    pub number_of_active_cars: u8,

    /// Details of the event.
    pub participants: Vec<Participant>,
}

#[derive(Debug, PartialEq, Clone)]
pub struct Participant {
    pub ai_controlled: u8,
    pub driver_id: Driver,
    pub team: Team,
    pub race_number: u8,
    pub nationality: u8,
    pub name: String,
    pub your_telemetry: u8,
}

#[derive(Debug, PartialEq, Clone, Copy)]
pub enum Team {
    Mercedes,
    Ferrari,
    RedBulRacing,
    Williams,
    RacingPoint,
    Renault,
    AlphaTauri,
    Haas,
    McLaren,
    AlfaRomeo,
    McLaren1988,
    McLaren1991,
    Williams1992,
    Ferrari1995,
    Williams1996,
    McLaren1998,
    Ferrari2002,
    Ferrari2004,
    Renault2006,
    Ferrari2007,
    McLaren2008,
    RedBull2010,
    Ferrari1976,
    ArtGrandPrix,
    CamposVexatexRacing,
    Calin,
    CharouzRacingSystem,
    Dams,
    RussianTime,
    MpMotorSport,
    Pertamina,
    McLaren1990,
    Trident,
    BwtArden,
    McLaren1976,
    Lotus1972,
    Ferrari1979,
    McLaren1982,
    Williams2003,
    Brawn2009,
    Lotus1978,
    F1GenericCar,
    ArtGp19,
    Campos19,
    Calin19,
    SauberJuniorCharouz19,
    Dams19,
    UniVirtuosi19,
    MpMotorSport19,
    Prema19,
    Trident19,
    Arden19,
    Benetton1994,
    Benetton1995,
    Ferrari2000,
    Jordan1991,
    MyTeam,
}

impl TryFrom<u8> for Team {
    type Error = ParseError;

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(Self::Mercedes),
            1 => Ok(Self::Ferrari),
            2 => Ok(Self::RedBulRacing),
            3 => Ok(Self::Williams),
            4 => Ok(Self::RacingPoint),
            5 => Ok(Self::Renault),
            6 => Ok(Self::AlphaTauri),
            7 => Ok(Self::Haas),
            8 => Ok(Self::McLaren),
            9 => Ok(Self::AlfaRomeo),
            10 => Ok(Self::McLaren1988),
            11 => Ok(Self::McLaren1991),
            12 => Ok(Self::Williams1992),
            13 => Ok(Self::Ferrari1995),
            14 => Ok(Self::Williams1996),
            15 => Ok(Self::McLaren1998),
            16 => Ok(Self::Ferrari2002),
            17 => Ok(Self::Ferrari2004),
            18 => Ok(Self::Renault2006),
            19 => Ok(Self::Ferrari2007),
            20 => Ok(Self::McLaren2008),
            21 => Ok(Self::RedBull2010),
            22 => Ok(Self::Ferrari1976),
            23 => Ok(Self::ArtGrandPrix),
            24 => Ok(Self::CamposVexatexRacing),
            25 => Ok(Self::Calin),
            26 => Ok(Self::CharouzRacingSystem),
            27 => Ok(Self::Dams),
            28 => Ok(Self::RussianTime),
            29 => Ok(Self::MpMotorSport),
            30 => Ok(Self::Pertamina),
            31 => Ok(Self::McLaren1990),
            32 => Ok(Self::Trident),
            33 => Ok(Self::BwtArden),
            34 => Ok(Self::McLaren1976),
            35 => Ok(Self::Lotus1972),
            36 => Ok(Self::Ferrari1979),
            37 => Ok(Self::McLaren1982),
            38 => Ok(Self::Williams2003),
            39 => Ok(Self::Brawn2009),
            40 => Ok(Self::Lotus1978),
            41 => Ok(Self::F1GenericCar),
            42 => Ok(Self::ArtGp19),
            43 => Ok(Self::Campos19),
            44 => Ok(Self::Calin19),
            45 => Ok(Self::SauberJuniorCharouz19),
            46 => Ok(Self::Dams19),
            47 => Ok(Self::UniVirtuosi19),
            48 => Ok(Self::MpMotorSport19),
            49 => Ok(Self::Prema19),
            50 => Ok(Self::Trident19),
            51 => Ok(Self::Arden19),
            52 => Ok(Self::Benetton1994),
            53 => Ok(Self::Benetton1995),
            54 => Ok(Self::Ferrari2000),
            55 => Ok(Self::Jordan1991),
            255 => Ok(Self::MyTeam),
            _ => Err(ParseError::new(ErrorKind::InvalidTeam(value))),
        }
    }
}

#[derive(Debug, PartialEq, Clone, Copy)]
pub enum Driver {
    CarlozSains,
    DanillKvyat,
    DanielRicciardo,
    KimiRaikkonen,
    LewisHemilton,
    MaxVerstappen,
    NicoHulkenberg,
    KevinMagnussen,
    RomainGrosjean,
    SebastianVettel,
    SergioPerez,
    ValterriBottas,
    EstebanOcon,
    LanceStroll,
    ArronBarnes,
    MartinGiles,
    AlexMurray,
    LucasRoth,
    IgorCorreia,
    SophieLevasseur,
    JonasSchiffer,
    AlainForest,
    JayLetournea,
    EstoSaari,
    YasarAtiyeh,
    CallistoCalabresi,
    NaotaIzum,
    HowardClarke,
    WilheimKaufmann,
    MarieLaursen,
    FlavioNieves,
    PeterBelousov,
    KlimekMichalksi,
    SantiagoMoreno,
    BenjaminCoppens,
    NoahVisser,
    GertWaldmuller,
    JulianQuesada,
    DanielJones,
    ArtemMarkelov,
    TadasukeMakino,
    SeanGeleal,
    NyckDeVreis,
    JackAitken,
    GeorgeRussel,
    MaximilianGunther,
    NireiFukuzumi,
    LucaGhiotto,
    LandoNorris,
    SergioSetteCamara,
    LouisDeletraz,
    AntonioFuoco,
    CharlesLeclerc,
    PierreGasly,
    AlexanderAlbon,
    NicholasLatifi,
    DorianBoccolacci,
    NikoKari,
    RobertoMerhi,
    ArjunMaini,
    AlessioLorandi,
    RubenMeijer,
    RashidNair,
    JackTremblay,
    AntonioGiovinazzi,
    RobertKubica,
    NobuharuMatsushita,
    NikitaMazepin,
    GuanyaZhou,
    MickSchumacher,
    CallumIlot,
    JuanManuelCorrea,
    JordanKing,
    MahaveerRaghunathan,
    TatianaCalderion,
    AnthoineHubert,
    GuilianoAlesi,
    RalphBoschung,
}

impl TryFrom<u8> for Driver {
    type Error = ParseError;

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        match value {
            0 => Ok(Self::CarlozSains),
            1 => Ok(Self::DanillKvyat),
            2 => Ok(Self::DanielRicciardo),
            6 => Ok(Self::KimiRaikkonen),
            7 => Ok(Self::LewisHemilton),
            9 => Ok(Self::MaxVerstappen),
            10 => Ok(Self::NicoHulkenberg),
            11 => Ok(Self::KevinMagnussen),
            12 => Ok(Self::RomainGrosjean),
            13 => Ok(Self::SebastianVettel),
            14 => Ok(Self::SergioPerez),
            15 => Ok(Self::ValterriBottas),
            17 => Ok(Self::EstebanOcon),
            19 => Ok(Self::LanceStroll),
            20 => Ok(Self::ArronBarnes),
            21 => Ok(Self::MartinGiles),
            22 => Ok(Self::AlexMurray),
            23 => Ok(Self::LucasRoth),
            24 => Ok(Self::IgorCorreia),
            25 => Ok(Self::SophieLevasseur),
            26 => Ok(Self::JonasSchiffer),
            27 => Ok(Self::AlainForest),
            28 => Ok(Self::JayLetournea),
            29 => Ok(Self::EstoSaari),
            30 => Ok(Self::YasarAtiyeh),
            31 => Ok(Self::CallistoCalabresi),
            32 => Ok(Self::NaotaIzum),
            33 => Ok(Self::HowardClarke),
            34 => Ok(Self::WilheimKaufmann),
            35 => Ok(Self::MarieLaursen),
            36 => Ok(Self::FlavioNieves),
            37 => Ok(Self::PeterBelousov),
            38 => Ok(Self::KlimekMichalksi),
            39 => Ok(Self::SantiagoMoreno),
            40 => Ok(Self::BenjaminCoppens),
            41 => Ok(Self::NoahVisser),
            42 => Ok(Self::GertWaldmuller),
            43 => Ok(Self::JulianQuesada),
            44 => Ok(Self::DanielJones),
            45 => Ok(Self::ArtemMarkelov),
            46 => Ok(Self::TadasukeMakino),
            47 => Ok(Self::SeanGeleal),
            48 => Ok(Self::NyckDeVreis),
            49 => Ok(Self::JackAitken),
            50 => Ok(Self::GeorgeRussel),
            51 => Ok(Self::MaximilianGunther),
            52 => Ok(Self::NireiFukuzumi),
            53 => Ok(Self::LucaGhiotto),
            54 => Ok(Self::LandoNorris),
            55 => Ok(Self::SergioSetteCamara),
            56 => Ok(Self::LouisDeletraz),
            57 => Ok(Self::AntonioFuoco),
            58 => Ok(Self::CharlesLeclerc),
            59 => Ok(Self::PierreGasly),
            62 => Ok(Self::AlexanderAlbon),
            63 => Ok(Self::NicholasLatifi),
            64 => Ok(Self::DorianBoccolacci),
            65 => Ok(Self::NikoKari),
            66 => Ok(Self::RobertoMerhi),
            67 => Ok(Self::ArjunMaini),
            68 => Ok(Self::AlessioLorandi),
            69 => Ok(Self::RubenMeijer),
            70 => Ok(Self::RashidNair),
            71 => Ok(Self::JackTremblay),
            74 => Ok(Self::AntonioGiovinazzi),
            75 => Ok(Self::RobertKubica),
            78 => Ok(Self::NobuharuMatsushita),
            79 => Ok(Self::NikitaMazepin),
            80 => Ok(Self::GuanyaZhou),
            81 => Ok(Self::MickSchumacher),
            82 => Ok(Self::CallumIlot),
            83 => Ok(Self::JuanManuelCorrea),
            84 => Ok(Self::JordanKing),
            85 => Ok(Self::MahaveerRaghunathan),
            86 => Ok(Self::TatianaCalderion),
            87 => Ok(Self::AnthoineHubert),
            88 => Ok(Self::GuilianoAlesi),
            89 => Ok(Self::RalphBoschung),
            _ => Err(ParseError::new(ErrorKind::InvalidDriver(value))),
        }
    }
}
